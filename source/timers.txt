Interactive Behaviors and Implicit Concurrency with Internal Timers
-------------------------------------------------------------------------------------

Learning objectives
````````````````````````````````````````````````

- Internal events from autonomous timer-based behavior (C)
- Modeling recurring and one-shot timers in UML State Machine diagrams (A) 
- Modeling execution scenarios with UML Collaboration diagrams (A) 
- Distinguishing between view states and (behavioral) model states (C) 
- Implementing state-dependent behavior using the State pattern (A) 
- Managing complexity in application architecture (C)
- Distinguishing among passive, reactive, and autonomous model
  components (C)
- The Model-View-Adapter pattern with autonomous model behavior (C) 
- Testing components with autonomous behavior and dependencies (A)

Introduction
````````````````````````````````````````````````

In this section, we'll study an application that has richer,
timer-based behaviors compared to the click counter example from the
previous section. Our example will be a countdown timer for cooking
and similar scenarios where we want to be notified when a set amount
of time has elapsed.


The functional requirements for a countdown timer
````````````````````````````````````````````````````

Let's start with the functional requirements for the countdown timer,
amounting to a fairly abstract description of its controls and
behavior.

The timer exposes the following controls:

- One two-digit display of the form 88.
- One multi-function button.

The timer behaves as follows:

- The timer always displays the remaining time in seconds.
- Initially, the timer is stopped and the (remaining) time is zero.
- If the button is pressed when the timer is stopped, the time is
  incremented by one up to a preset maximum of 99. (The button acts as
  an increment button.)
- If the time is greater than zero and three seconds elapse from the
  most recent time the button was pressed, then the timer beeps once
  and starts running.
- While running, the timer subtracts one from the time for every
  second that elapses.
- If the timer is running and the button is pressed, the timer stops
  and the time is reset to zero. (The button acts as a cancel button.)
- If the timer is running and the time reaches zero by itself (without
  the button being pressed), then the timer stops counting down, and
  the alarm starts beeping continually and indefinitely.
- If the alarm is sounding and the button is pressed, the alarm stops
  sounding; the timer is now stopped and the (remaining) time is
  zero. (The button acts as a stop button.)


A graphical user interface (GUI) for a countdown timer
```````````````````````````````````````````````````````````

Our next step is to flesh out the GUI for our timer. For usability,
we'll label the multifunction button with its current function. We'll
also indicate which state the timer is currently in. 

The following screenshots show the default scenario where we start up
the timer, add a few seconds, wait for it to start counting down, and
ultimately reach the alarm state.

.. figure:: images/CountdownTimerStoppedZero.png
   :alt: Countdown Timer stopped state with zero time
   :scale: 50%

   The countdown timer in the initial stopped state with zero time.

.. figure:: images/CountdownTimerStoppedNonzero.png
   :alt: Countdown Timer stopped state with zero time
   :scale: 50%

   The countdown timer in the stopped state after adding some time.

.. figure:: images/CountdownTimerRunning.png
   :alt: Countdown Timer stopped state with zero time
   :scale: 50%

   The countdown timer in the running state.

.. figure:: images/CountdownTimerRinging.png
   :alt: Countdown Timer in the alarm state
   :scale: 50%

   The countdown timer in the alarm ringing state.


Modeling the interactive behavior
````````````````````````````````````````````````

.. figure:: images/CountdownTimerStates.png
   :alt: Countdown Timer FSM

   The UML state machine diagram modeling the dynamic behavior of the
   countdown timer application.
 
Let's again try to describe the abstract behavior of the countdown
timer using a UML state machine diagram. As usual, there are various
ways to do this, and our guiding principle is to keep things simple
and close to the informal description of the behavior.

It is easy to see that we need to represent the current counter
value. Once we accept this, we really don't need to distinguish
between the stopped state (with counter value zero) and the counting
state (with counter value greater than zero). The other states that
arise naturally are the running state and the alarm state. 

As in the click counter example, these model states map directly to
the view states shown above. Again, the differences among the view
states are very minor and are aimed mostly at usability: A properly
labeled button is a much more effective affordance than an unlabeled
or generically labeled one.

Note that there are two types of (internal) timers at work here:

- *one-shot timers*, such as the three-second timer in the stopped
  state that gets restarted every time we press the multifunction
  button to add time
- *recurring timers*, such as the one-second timer in the running
  state that fires continually for every second that goes by
 

Implementing time-based autonomous behavior
````````````````````````````````````````````````

While the entirely passive bounded counter behavior from the previous
section was straightforward to implement, the countdown timer includes
autonomous timer-based behaviors that give rise to another level of
complexity. 

There are different ways to deal with this behavioral
complexity. Given that we have already expressed the behavior as a
state machine, we can use the *State* software design pattern to
separate state-dependent behavior from overarching handling of
external and internal triggers and actions.

We start by defining a state abstraction. Besides the same common
methods and reference to its surrounding state machine, each state has
a unique identifier.

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/model/state/TimerState.java
   :start-after: begin-type-TimerState
   :end-before: end-type-TimerState
   :language: java 
   :linenos:

In addition, a state receives UI events and clock ticks. Accordingly,
it implements the corresponding interfaces, which are defined as
follows:

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/common/TimerUIListener.java
   :start-after: begin-type-TimerUIListener
   :end-before: end-type-TimerUIListener
   :language: java 
   :linenos:

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/model/clock/ClockListener.java
   :start-after: begin-type-ClockListener
   :end-before: end-type-ClockListener
   :language: java 
   :linenos:

As we discussed in section :ref:`sec_Events`, Android follows an
event source/listener naming idiom. As our examples illustrate, it is
straightforward to define custom app-specific events that follow this
same convention. Our ``ClockListener``, for example, combines two
kinds of events within a single interface.

Concrete state classes implement the abstract ``TimerState``
class. The key parts of the state machine implementation follow:

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/model/state/DefaultTimerStateMachine.java
   :start-after: begin-fragment-DefaultTimerStateMachineSETUP
   :end-before: end-fragment-DefaultTimerStateMachineSETUP
   :language: java 
   :linenos:

Let's focus on the stopped state first. In this state, neither is the
clock ticking, nor is the alarm ringing. On every button press, the
remaining running time goes up by one second and the one-shot
three-second idle timeout starts from zero. If three seconds elapse
before another button press, we transition to the running state.

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/model/state/DefaultTimerStateMachine.java
   :start-after: begin-fragment-DefaultTimerStateMachineSTOPPED
   :end-before: end-fragment-DefaultTimerStateMachineSTOPPED
   :language: java 
   :linenos:
 
Let's now take a look at the running state. In this state, the clock is
ticking but the alarm is not ringing. With every recurring clock tick,
the remaining running time goes down by one second. If it reaches
zero, we transition to the ringing state. If a button press occurs, we
stop the clock and transition to the stopped state.

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/model/state/DefaultTimerStateMachine.java
   :start-after: begin-fragment-DefaultTimerStateMachineRUNNING
   :end-before: end-fragment-DefaultTimerStateMachineRUNNING
   :language: java 
   :linenos:

Finally, in the ringing state, nothing is happening other than the
alarm ringing. If a button press occurs, we stop the alarm and
transition to the stopped state.
 
.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/model/state/DefaultTimerStateMachine.java
   :start-after: begin-fragment-DefaultTimerStateMachineRINGING
   :end-before: end-fragment-DefaultTimerStateMachineRINGING
   :language: java 
   :linenos:
 
Managing structural complexity
````````````````````````````````````````````````

We can again describe the architecture of the countdown timer Android
app as an instance of the Model-View-Adapter (MVA) architectural
pattern. In figure :ref:`fig_AutonomousModelViewAdapter`, solid arrows
represent (synchronous) method invocation, and dashed arrows represent
(asynchronous) events. Here, both the view components and the model's
autonomous timer send events to the adapter. 

Figures :ref:`fig_CountdownTimerMVACollab1` and
:ref:`fig_CountdownTimerMVACollab2` illustrate the two main
interaction scenarios side-by-side. 

The user input scenario illustrates the system's end-to-end response
to a button press. The internal timeout gets set in response to a
button press. When the timeout event actually occurs, corresponding to
an invocation of the `onTimeout` method, the system responds by
transitioning to the running state.

By contrast, the autonomous scenario shows the system's end-to-end
response to a recurring internal clock tick, corresponding to an
invocation of the `onTick` method. When the remaining time reaches
zero, the system responds by transitioning to the alarm-ringing state.

.. _fig_AutonomousModelViewAdapter:

.. figure:: images/AutonomousModelViewAdapter.png
   :alt: Autonomous Model-View-Adapter Architecture
   :scale: 100%

   Countdown timer: Model-View-Adapter architecture

.. _fig_CountdownTimerMVACollab1:

.. figure:: images/CountdownTimerMVACollab1.png
   :alt: Countdown Timer MVA Collab Scenario 1
   :scale: 100%

   Countdown timer: user input scenario

.. _fig_CountdownTimerMVACollab2:

.. figure:: images/CountdownTimerMVACollab2.png
   :alt: Countdown Timer MVA Collab Scenario 2
   :scale: 100%

   Countdown timer: autonomous scenario

Testing more complex GUI applications
````````````````````````````````````````````````

As we develop more complex applications, we increasingly benefit from
thorough automated testing. In particular, there are different
structural levels of testing: component-level unit testing,
integration testing, and system testing.

In addition, as our application grows in complexity, so does our test
code, so it makes sense to use good software engineering practice in
the development of our test code. Accordingly, software design
patterns for test code have emerged, such as the *Testclass
Superclass* pattern [XUnitPatterns] we use in section :ref:`sec_Events`.

Unit-testing passive model components
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
The time model is simple passive component, so we can test it very
similarly as the bounded counter model in section :ref:`sec_Events`.


Unit-testing components with autonomous behavior
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Testing components with autonomous behavior is more challenging
because we have to attach some kind of probe to observe the
behavior. 

Let's try this on our clock model. The following test verifies that a
stopped clock does not emit any tick events.

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/test/model/clock/AbstractClockModelTest.java
   :start-after: begin-method-testStopped
   :end-before: end-method-testStopped
   :language: java 
   :linenos:

And this one verifies that a running clock emits roughly one tick
event per second.

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/test/model/clock/AbstractClockModelTest.java
   :start-after: begin-method-testRunning
   :end-before: end-method-testRunning
   :language: java 
   :linenos:


Unit-testing components with complex dependencies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some model components have complex dependencies. Our timer's state
machine model, e.g., expects implementations of the interfaces
``TimeModel``, ``ClockModel``, and ``TimerUIUpdateListener`` to be
present.  We can achieve this by manually implementing a so-called
*mock object* that unifies these three dependencies of the timer state
machine model, corresponding to the three interfaces this mock object
implements.

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/test/model/state/AbstractTimerStateMachineTest.java
   :start-after: begin-type-UnifiedMockDependency 
   :end-before: end-type-UnifiedMockDependency 
   :language: java 
   :linenos:

The instance variables and corresponding getters enable us to test
whether the SUT produced the expected state changes in the mock
object. The three remaining blocks of methods correspond to the three
implemented interfaces, respectively.

Now we can write tests to verify actual scenarios. In the following
scenario, time is 0, press button once, expect time 1, press button
198 times (the max time is 99), expect time 99, wait 3 seconds, check
if running, wait 50 seconds, expect time 49 (99-50), wait 49 seconds,
expect time 0, check if ringing, wait 3 more seconds (just in case),
check if still ringing, press button to turn off ring, make sure
ringing stopped and state is stopped.

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/test/model/state/AbstractTimerStateMachineTest.java 
   :start-after: begin-method-testScenarioRun2
   :end-before: end-method-testScenarioRun2
   :language: java 
   :linenos:
 
Note that this happens *in fake time* (fast-forward) because we can
make the rate of the clock ticks as fast as the state machine can keep
up.

.. note:: There are also various mocking frameworks, such as Mockito
	  and JMockit, which can automatically generate mock objects
	  that represent component dependencies from interfaces and
	  provide APIs or domain-specific languages for specifying
	  test expectations.


Programmatic system testing of the app
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following is a system test of the application with all of its real
component present. It verifies the following scenario *in real time*:
time is 0, press button five times, expect time 5, wait 3 seconds,
expect time 5, wait 3 more seconds, expect time 2, press stopTick
button to reset time, expect time 0. (includes all state transitions
as assertions).

.. literalinclude:: ../examples/countdowntimer-android-java/Timer/src/main/java/edu/luc/etl/cs313/android/countdowntimer/test/android/AbstractTimerActivityTest.java
   :start-after: begin-method-testScenarioRun2 
   :end-before: end-method-testScenarioRun2  
   :language: java 
   :linenos:

As in section :ref:`sec_Events`, we can run this test as an
in-container instrumentation test or out-of-container using a
simulated environment such as Robolectric.
